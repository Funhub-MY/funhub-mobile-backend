## Autogenerated by Scribe. DO NOT MODIFY.

name: User
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/v1/user/import-contacts
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: Contacts
      subgroupDescription: ''
      title: 'Import User Contacts'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      contacts:
        name: contacts
        description: required.
        required: false
        example:
          -
            country_code: '60'
            phone_no: '123456789'
            name: 'John Doe'
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        custom: []
      'contacts[].country_code':
        name: 'contacts[].country_code'
        description: ''
        required: true
        example: optio
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      'contacts[].phone_no':
        name: 'contacts[].phone_no'
        description: ''
        required: true
        example: officiis
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      contacts:
        -
          country_code: '60'
          phone_no: '123456789'
          name: 'John Doe'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Contacts imported successfully"
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer E5hDbgaev8kPacVf6431d6Z'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/user/contacts-friends
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: Contacts
      subgroupDescription: ''
      title: 'Get Contacts not yet followed'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "users": []
          }
        headers: []
        description: success
        custom: []
      -
        status: 200
        content: |-
          {
          "message": "No friends found"
          }
        headers: []
        description: error
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 14PkZ6g5abfe8hdv3aD6VEc'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/user/followings
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: Followings
      subgroupDescription: ''
      title: 'Get all followings of user id or logged in user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'optional The id of the user, if not provided will use Logged In User ID.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      user_id: 1
    queryParameters:
      query:
        name: query
        description: 'optional Search query for name of followings.'
        required: false
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanQueryParameters:
      query: John
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "followings": []
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "User not found"}'
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer hE61bgve58DaVa3fdc4Pk6Z'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/user/followers
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: Followers
      subgroupDescription: ''
      title: 'Get all followers of user id or logged in user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'optional The id of the user, if not provided will use Logged In User ID.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      user_id: 1
    queryParameters:
      query:
        name: query
        description: 'optional Search query for name of followers.'
        required: false
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanQueryParameters:
      query: John
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "followers": []
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "User not found"}'
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer hgc5d68vabZ3DV6a1EP4ekf'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/user/follow
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: Followings
      subgroupDescription: ''
      title: 'Follow another user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: 'The id of the user to follow'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      user_id: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "You are now following this user"
          }
        headers: []
        description: success
        custom: []
      -
        status: 200
        content: |-
          {
          "message": "Follow request sent"
          }
        headers: []
        description: 'if user profile is private and not following'
        custom: []
      -
        status: 400
        content: '{"message": "You are already following this user"}'
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer v8kaeb3d6DZV15PchE64fga'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/user/unfollow
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: Followings
      subgroupDescription: ''
      title: 'Unfollow another user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: 'The id of the user to unfollow'
        required: true
        example: 9
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      user_id: 9
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "You are now unfollowing this user"
          }
        headers: []
        description: success
        custom: []
      -
        status: 400
        content: '{"message": "You are not following this user"}'
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer aDPgv5ah8ck6Zbe163f4VdE'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/user/request_follow/accept
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: Followings
      subgroupDescription: ''
      title: 'Accept Follow Request'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: 'The id of the user to accept follow request'
        required: true
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      user_id: 3
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "You are now following this user"
          }
        headers: []
        description: success
        custom: []
      -
        status: 400
        content: '{"message": "Follow request not found"}'
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer ed1PaDbh3Z668cagkvE4Vf5'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/user/request_follow/reject
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: Followings
      subgroupDescription: ''
      title: 'Reject Follow Request'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: 'The id of the user to reject follow request'
        required: true
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      user_id: 3
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Follow request removed"
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 8bfaVk61ec53EDdh4Pag6vZ'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/user/request_follows
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: Followings
      subgroupDescription: ''
      title: 'My Follow Requests'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "users": []
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer ZevPg6kV5D1a4a8Ehcf6d3b'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/user/report
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: Reports
      subgroupDescription: ''
      title: 'Report a user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: 'The id of the comment.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      reason:
        name: reason
        description: ''
        required: true
        example: eum
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      violation_level:
        name: violation_level
        description: 'The violation level of this report'
        required: false
        example: minima
        type: required
        enumValues: []
        exampleWasSpecified: false
        custom: []
      violation_type:
        name: violation_type
        description: 'The violation type of this report'
        required: false
        example: facilis
        type: required
        enumValues: []
        exampleWasSpecified: false
        custom: []
      also_block_user:
        name: also_block_user
        description: 'optional Whether to block the user or not.'
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      user_id: 1
      reason: eum
      violation_level: minima
      violation_type: facilis
      also_block_user: true
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Comment reported",
          }
        headers: []
        description: success
        custom: []
      -
        status: 422
        content: '{"errors": ["user_id": ["The User Id field is required."] ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
      -
        status: 422
        content: '{"message": "You have already reported this comment" ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Z31bcD8fE45aPgaVd6vh6ek'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/user/block
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: Blocks
      subgroupDescription: ''
      title: 'Block a user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: 'The id of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      reason:
        name: reason
        description: 'optional The reason for blocking the user.'
        required: false
        example: Spam
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      user_id: 1
      reason: Spam
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "User blocked",
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 8DVPbahdZvE664g351eafck'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/user/unblock
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: Blocks
      subgroupDescription: ''
      title: 'Unblock a user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: 'The id of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      user_id: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "User unblocked",
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer VDgdfaZ6e4Ekb81ca5Pvh63'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/user/my_blocked_users
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: Blocks
      subgroupDescription: ''
      title: 'Get My Blocked Users List'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           data: {}
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer fv6kdeZ1c3Va6Ea58h4DgPb'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/user/delete
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete My Account'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      reason:
        name: reason
        description: ''
        required: true
        example: doloribus
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      reason: doloribus
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Account deleted successfully."
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer aVdPZv6bDeE4g18c5kaf3h6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/users_by_id
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Users By IDs'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_ids:
        name: user_ids
        description: 'The ids of the users.'
        required: true
        example: '1,2,3'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      user_ids: '1,2,3'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_ids:
        name: user_ids
        description: ''
        required: true
        example: quia
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      user_ids: quia
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "data": {
          }
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer bPf6veZDcV34Ea5dh1a8g6k'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/user/{user_id}'
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get a user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
      user:
        name: user
        description: 'The id of the user.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      user_id: 3
      user: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "data": {
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer abd8Zf6c1VE64k3he5gDavP'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/user
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get auth user details'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "user": {
          },
          "token": ""
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer v41gEda6Z3VhecbPa8f6D5k'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/public/user/{user_id}'
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get a public user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
      user:
        name: user
        description: 'The id of the user.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      user_id: 3
      user: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "user": {
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 41hacb5f6vde8ZgkaED63PV'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/user
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update User Details (name, username, bio, job_title, dob, gender, location, avatar, cover, article_categories)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      update_type:
        name: update_type
        description: 'Field to update.'
        required: true
        example: job_title
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      name:
        name: name
        description: "Name of the user (Required if update_type is 'name')."
        required: false
        example: 'John Doe'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      username:
        name: username
        description: "Username of the user (Required if update_type is 'username')."
        required: false
        example: johndoe
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      bio:
        name: bio
        description: "Bio of the user (Required if update_type is 'bio')."
        required: false
        example: 'I am a developer'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      job_title:
        name: job_title
        description: "Job title of the user (Required if update_type is 'job_title')."
        required: false
        example: Developer
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      day:
        name: day
        description: "Day of the date of birth (Required if update_type is 'dob')."
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      month:
        name: month
        description: "Month of the date of birth (Required if update_type is 'dob')."
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      year:
        name: year
        description: "Year of the date of birth (Required if update_type is 'dob')."
        required: false
        example: 1990
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      country_id:
        name: country_id
        description: "Country id of the user (Required if update_type is 'location')."
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      state_id:
        name: state_id
        description: "State id of the user (Required if update_type is 'location')."
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      avatar:
        name: avatar
        description: "One image file to upload,Avatar of the user (Required if update_type is 'avatar')."
        required: false
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        custom: []
      cover:
        name: cover
        description: "One image file to upload,Cover of the user (Required if update_type is 'cover')."
        required: false
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        custom: []
      category_ids:
        name: category_ids
        description: "Array of article category ids (Required if update_type is 'article_categories')."
        required: false
        example:
          - 1
          - 2
          - 3
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      update_type: job_title
      name: 'John Doe'
      username: johndoe
      bio: 'I am a developer'
      job_title: Developer
      day: 1
      month: 1
      year: 1990
      country_id: 1
      state_id: 1
      category_ids:
        - 1
        - 2
        - 3
    fileParameters:
      avatar: null
      cover: null
    responses:
      -
        status: 200
        content: |-
          {
          "user":
          {
           "id": 1,
           "name": "John Doe"
           "username": "johndoe"
           "email": "johndoe@gmail.com"
           "verified_email": true
           "auth_provider": "email"
           "avatar": "https://domain.com/storage/avatars/1/avatar.jpg"
           "avatar_thumb": "https://domain.com/storage/avatars/1/avatar_thumb.jpg"
           "bio": "I am a developer"
           "cover": "https://domain.com/storage/covers/1/cover.jpg"
           "articles_published_count": 0
           "following_count": 0
           "followers_count": 0
           "has_completed_profile": false
           "has_avatar": true
           "point_balance": 0
           "unread_notifications_count": 0
           "is_following": false
           "dob": "1990-01-01",
           "gender": "male",
           "job_title": "Engineer",
           "country_id": 1,
           "state_id": 1,
           "category_ids": [1,2,3]
          },
          "message": "Field updated"

          }
        headers: []
        description: success
        custom: []
      -
        status: 401
        content: '{"message": "Unauthenticated."}'
        headers: []
        description: Unauthenticated
        custom: []
      -
        status: 500
        content: '{"message": "Error updating user details", "error": "Error message"}'
        headers: []
        description: 'Error updating user details'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer VaZh6ak6ePb15gf38dvcE4D'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/user/password
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update user password (only for login with OTP)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      old_password:
        name: old_password
        description: 'The old password of the user.'
        required: true
        example: abcd1234
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      new_password:
        name: new_password
        description: 'The new password of the user.'
        required: true
        example: abcd1234
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      new_password_confirmation:
        name: new_password_confirmation
        description: 'The new password confirmation of the user.'
        required: true
        example: abcd1234
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      old_password: abcd1234
      new_password: abcd1234
      new_password_confirmation: abcd1234
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Password updated",
          "user":
               * {
           "id": 1,
           "name": "John Doe"
           "username": "johndoe"
           "email": "johndoe@gmail.com"
           "verified_email": true
           "auth_provider": "email"
           "avatar": "https://domain.com/storage/avatars/1/avatar.jpg"
           "avatar_thumb": "https://domain.com/storage/avatars/1/avatar_thumb.jpg"
           "bio": "I am a developer"
           "cover": "https://domain.com/storage/covers/1/cover.jpg"
           "articles_published_count": 0
           "following_count": 0
           "followers_count": 0
           "has_completed_profile": false
           "has_avatar": true
           "point_balance": 0
           "unread_notifications_count": 0
           "is_following": false
           "dob": "1990-01-01",
           "gender": "male",
           "job_title": "Engineer",
           "country_id": 1,
           "state_id": 1,
           "category_ids": [1,2,3]
          },
          }
        headers: []
        description: success
        custom: []
      -
        status: 422
        content: |-
          {
          "message": "The given data was invalid.",
          "errors": {
          "old_password": [
           "The old password is incorrect"
          ],
          "password": [
          "The password confirmation does not match."
          ]
          }
        headers: []
        description: 'validation error'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Zha5EDa6dcgb36Ve184Pfvk'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/user/email
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update User Email'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: ''
        required: false
        example: null
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      new_email:
        name: new_email
        description: 'Email of the user.'
        required: true
        example: john@gmail.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      new_email_confirmation:
        name: new_email_confirmation
        description: 'Email of the user.'
        required: true
        example: john@gmail.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      new_email: john@gmail.com
      new_email_confirmation: john@gmail.com
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Email updated",
          "email": "johndoe@gmail.com",
          "user": {}
          }
        headers: []
        description: success
        custom: []
      -
        status: 401
        content: '{"message": "Unauthenticated."}'
        headers: []
        description: Unauthenticated
        custom: []
      -
        status: 422
        content: '{"message": "Email already verified for your account"}'
        headers: []
        description: 'Email already verified for your account'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 5Vdkfb8D64Z3eaghPac16vE'
    controller: null
    method: null
    route: null
    custom: []
