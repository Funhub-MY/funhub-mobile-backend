## Autogenerated by Scribe. DO NOT MODIFY.

name: Article
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/v1/articles/gallery
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Upload Images for Article'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      images:
        name: images
        description: 'The images to upload.'
        required: true
        example: null
        type: file
        custom: []
      is_cover:
        name: is_cover
        description: 'used to set this image as a cover.'
        required: false
        example: true
        type: boolean
        custom: []
    cleanBodyParameters:
      is_cover: true
    fileParameters:
      images: null
    responses:
      -
        status: 200
        content: |-
          {
          "uploaded": [
              {
                 "id": 1,
                 "name": "image.jpg",
                 "url": "http://localhost:8000/storage/user_uploads/1/image.jpg",
                 "size": 12345,
                 "type": "image/jpeg"
             }
          ]
          }
        headers: []
        description: success
        custom: []
      -
        status: 422
        content: '{"errors": ["images": ["The images field is required."] ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer avV1Pkga86ce4Zb3fhdD56E'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/articles/video-upload
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Upload Video for Article'
      description: |-
        Video size must not larger than 500MB, will stream video response back to client on progress via header X-Upload-Progress / calculate your own using X-Content-Duration

        Must be able to stream completion percentage back to client
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      video:
        name: video
        description: 'The video to upload.'
        required: true
        example: null
        type: file
        custom: []
    cleanBodyParameters: []
    fileParameters:
      video: null
    responses:
      -
        status: 200
        content: |-
          {
          "url" : "http://localhost:8000/storage/user_video_uploads/1/video.mp4"
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer vkEgbfac6V638PD45dheZ1a'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/articles/my_articles
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Articles for Logged in user (for Profile Page)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      published_only:
        name: published_only
        description: 'optional Filter by published articles.'
        required: false
        example: true
        type: boolean
        custom: []
      filter:
        name: filter
        description: 'Column to Filter.'
        required: false
        example: 'Filterable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
        type: string
        custom: []
      filter_value:
        name: filter_value
        description: 'Value to Filter.'
        required: false
        example: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
        type: string
        custom: []
      sort:
        name: sort
        description: 'Column to Sort.'
        required: false
        example: 'Sortable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
        type: string
        custom: []
      order:
        name: order
        description: 'Direction to Sort.'
        required: false
        example: 'Sortable directions are: asc, desc'
        type: string
        custom: []
      limit:
        name: limit
        description: 'Per Page Limit Override.'
        required: false
        example: 10
        type: integer
        custom: []
      offset:
        name: offset
        description: 'Offset Override.'
        required: false
        example: 0
        type: integer
        custom: []
    cleanBodyParameters:
      published_only: true
      filter: 'Filterable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
      filter_value: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
      sort: 'Sortable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
      order: 'Sortable directions are: asc, desc'
      limit: 10
      offset: 0
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [],
           "links": {},
           "meta": {
              "current_page": 1,
            }
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 613DbevE8fPdVca5gZ6a4hk'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/articles/my_bookmarks
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get My Bookmarked Articles'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      filter:
        name: filter
        description: 'Column to Filter.'
        required: false
        example: 'Filterable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
        type: string
        custom: []
      filter_value:
        name: filter_value
        description: 'Value to Filter.'
        required: false
        example: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
        type: string
        custom: []
      sort:
        name: sort
        description: 'Column to Sort.'
        required: false
        example: 'Sortable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
        type: string
        custom: []
      order:
        name: order
        description: 'Direction to Sort.'
        required: false
        example: 'Sortable directions are: asc, desc'
        type: string
        custom: []
      limit:
        name: limit
        description: 'Per Page Limit Override.'
        required: false
        example: 10
        type: integer
        custom: []
      offset:
        name: offset
        description: 'Offset Override.'
        required: false
        example: 0
        type: integer
        custom: []
    cleanBodyParameters:
      filter: 'Filterable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
      filter_value: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
      sort: 'Sortable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
      order: 'Sortable directions are: asc, desc'
      limit: 10
      offset: 0
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [],
           "links": {},
           "meta": {
              "current_page": 1,
            }
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer V4d185f3Pa6cgkvhZDaeE6b'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/articles
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Articles for Logged in user (for Home Page)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      article_ids:
        name: article_ids
        description: 'optional Article Ids to Filter. Example [1,2,3]'
        required: false
        example:
          - assumenda
        type: 'string[]'
        custom: []
      category_ids:
        name: category_ids
        description: 'optional Category Ids to Filter.'
        required: false
        example:
          - 1
          - 2
          - 3
        type: 'string[]'
        custom: []
      video_only:
        name: video_only
        description: 'optional Filter by Videos.'
        required: false
        example: 1
        type: integer
        custom: []
      following_only:
        name: following_only
        description: 'optional Filter by Articles by Users who logged in user is following.'
        required: false
        example: 1
        type: integer
        custom: []
      tag_ids:
        name: tag_ids
        description: 'optional Tag Ids to Filter.'
        required: false
        example:
          - 1
          - 2
          - 3
        type: 'string[]'
        custom: []
      filter:
        name: filter
        description: 'Column to Filter.'
        required: false
        example: 'Filterable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
        type: string
        custom: []
      filter_value:
        name: filter_value
        description: 'Value to Filter.'
        required: false
        example: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
        type: string
        custom: []
      sort:
        name: sort
        description: 'Column to Sort.'
        required: false
        example: 'Sortable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
        type: string
        custom: []
      order:
        name: order
        description: 'Direction to Sort.'
        required: false
        example: 'Sortable directions are: asc, desc'
        type: string
        custom: []
      limit:
        name: limit
        description: 'Per Page Limit Override.'
        required: false
        example: 10
        type: integer
        custom: []
      offset:
        name: offset
        description: 'Offset Override.'
        required: false
        example: 0
        type: integer
        custom: []
    cleanBodyParameters:
      article_ids:
        - assumenda
      category_ids:
        - 1
        - 2
        - 3
      video_only: 1
      following_only: 1
      tag_ids:
        - 1
        - 2
        - 3
      filter: 'Filterable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
      filter_value: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
      sort: 'Sortable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
      order: 'Sortable directions are: asc, desc'
      limit: 10
      offset: 0
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [],
           "links": {},
           "meta": {
              "current_page": 1,
            }
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 5VeZva6c438fbPhadkgED16'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/articles
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create New Article'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'The title of the article.'
        required: true
        example: 'This is a title'
        type: string
        custom: []
      type:
        name: type
        description: 'The type of the article.'
        required: true
        example: 'multimedia,text,video'
        type: string
        custom: []
      body:
        name: body
        description: 'The body of the article.'
        required: true
        example: 'This is a caption or body of article'
        type: string
        custom: []
      status:
        name: status
        description: 'The status of the article.'
        required: true
        example: 0
        type: integer
        custom: []
      published_at:
        name: published_at
        description: 'The published date of the article.'
        required: false
        example: '2021-02-21 12:00:00'
        type: datetime
        custom: []
      categories:
        name: categories
        description: 'The categories ID of the article.'
        required: false
        example:
          - 1
          - 2
        type: 'string[]'
        custom: []
      tags:
        name: tags
        description: 'The tags of the article.'
        required: false
        example:
          - '#tag1'
          - '#tag2'
        type: 'string[]'
        custom: []
      images:
        name: images
        description: 'The images IDs. Must first call upload images endpoint.'
        required: false
        example:
          - 1
          - 2
        type: 'string[]'
        custom: []
      video:
        name: video
        description: 'The video ID. Must first call upload videos endpoint.'
        required: false
        example: 1
        type: integer
        custom: []
      excerpt:
        name: excerpt
        description: 'The excerpt of the article.'
        required: false
        example: 'This is a excerpt of article'
        type: string
        custom: []
    cleanBodyParameters:
      title: 'This is a title'
      type: 'multimedia,text,video'
      body: 'This is a caption or body of article'
      status: 0
      published_at: '2021-02-21 12:00:00'
      categories:
        - 1
        - 2
      tags:
        - '#tag1'
        - '#tag2'
      images:
        - 1
        - 2
      video: 1
      excerpt: 'This is a excerpt of article'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Article updated",
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "Comment not found"}'
        headers: []
        description: 'Not Found'
        custom: []
      -
        status: 422
        content: '{"errors": ["body": ["The Body field is required."] ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer gv51ahkDaV6Ec6PZ8bfed34'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/articles/{id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get One Article by ID'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The id of the article.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "article": {}
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "Article not found"}'
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Dvf56gVaPad86Z1Ehebk43c'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/v1/articles/{id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update article by ID. (Only owner of article can update)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The id of the article.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      body:
        name: body
        description: 'The body of the article.'
        required: true
        example: 'This is a comment'
        type: string
        custom: []
      status:
        name: status
        description: 'The status of the article, change this to 0 to unpublish.'
        required: true
        example: 0
        type: integer
        custom: []
      tags:
        name: tags
        description: 'The tags of the article.'
        required: false
        example:
          - '#tag1'
          - '#tag2'
        type: 'string[]'
        custom: []
      categories:
        name: categories
        description: 'The categories ID of the article.'
        required: false
        example:
          - 1
          - 2
        type: 'string[]'
        custom: []
      images:
        name: images
        description: 'The images ID of the article.'
        required: false
        example: null
        type: file
        custom: []
      video:
        name: video
        description: 'The video ID of the article.'
        required: false
        example: null
        type: file
        custom: []
    cleanBodyParameters:
      body: 'This is a comment'
      status: 0
      tags:
        - '#tag1'
        - '#tag2'
      categories:
        - 1
        - 2
    fileParameters:
      images: null
      video: null
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Article updated",
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "Comment not found"}'
        headers: []
        description: 'Not Found'
        custom: []
      -
        status: 422
        content: '{"errors": ["body": ["The Body field is required."] ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer ga3EDdcbfvV6hP81k56aZe4'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/articles/{id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Remove article by ID. (Only owner of article can delete)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The id of the Article.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Article deleted"
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "Article not found"}'
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3VbZkgaDef8hE4c5vda66P1'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/articles/report
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Reports
      subgroupDescription: ''
      title: 'Report an article'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      article_id:
        name: article_id
        description: ''
        required: true
        example: 10
        type: integer
        custom: []
      reason:
        name: reason
        description: 'The reason for reporting the comment.'
        required: true
        example: Spam
        type: string
        custom: []
      violation_type:
        name: violation_type
        description: 'The violation type of this report'
        required: false
        example: voluptatem
        type: required
        custom: []
      violation_level:
        name: violation_level
        description: 'The violation level of this report'
        required: false
        example: tempora
        type: required
        custom: []
      article:
        name: article
        description: 'The id of the article.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanBodyParameters:
      article_id: 10
      reason: Spam
      violation_type: voluptatem
      violation_level: tempora
      article: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Comment reported",
          }
        headers: []
        description: success
        custom: []
      -
        status: 422
        content: '{"errors": ["article_id": ["The Article Id field is required."] ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
      -
        status: 422
        content: '{"message": "You have already reported this comment" ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer aegZf6akPv58c1VDhb64E3d'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/article_tags
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: 'Article Tags'
      subgroupDescription: ''
      title: 'Get popular tags'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      filter:
        name: filter
        description: 'Column to Filter.'
        required: false
        example: 'Filterable columns are: id, name, created_at, updated_at'
        type: string
        custom: []
      filter_value:
        name: filter_value
        description: 'Value to Filter.'
        required: false
        example: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
        type: string
        custom: []
      sort:
        name: sort
        description: 'Column to Sort.'
        required: false
        example: 'Sortable columns are: id, name, created_at, updated_at'
        type: string
        custom: []
      order:
        name: order
        description: 'Direction to Sort.'
        required: false
        example: 'Sortable directions are: asc, desc'
        type: string
        custom: []
      limit:
        name: limit
        description: 'Per Page Limit Override.'
        required: false
        example: 10
        type: integer
        custom: []
      offset:
        name: offset
        description: 'Offset Override.'
        required: false
        example: 0
        type: integer
        custom: []
    cleanBodyParameters:
      filter: 'Filterable columns are: id, name, created_at, updated_at'
      filter_value: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
      sort: 'Sortable columns are: id, name, created_at, updated_at'
      order: 'Sortable directions are: asc, desc'
      limit: 10
      offset: 0
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "tags": []
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: ''
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 16d4EbaVZ3khev86gacfDP5'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/article_tags/{article_id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: 'Article Tags'
      subgroupDescription: ''
      title: 'Get Tags by article id'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      article_id:
        name: article_id
        description: 'The id of the article.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      article_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "tags": []
           }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: ''
        headers: []
        description: 'No tags found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 56dahcb6DaVZevkE84P1g3f'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/article_categories
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: 'Article Categories'
      subgroupDescription: ''
      title: 'Get popular Article Categories'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      is_featured:
        name: is_featured
        description: 'Is Featured Categories.'
        required: false
        example: 1
        type: integer
        custom: []
      filter:
        name: filter
        description: 'Column to Filter.'
        required: false
        example: 'Filterable columns are: id, name, created_at, updated_at'
        type: string
        custom: []
      filter_value:
        name: filter_value
        description: 'Value to Filter.'
        required: false
        example: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
        type: string
        custom: []
      sort:
        name: sort
        description: 'Column to Sort.'
        required: false
        example: 'Sortable columns are: id, name, created_at, updated_at'
        type: string
        custom: []
      order:
        name: order
        description: 'Direction to Sort.'
        required: false
        example: 'Sortable directions are: asc, desc'
        type: string
        custom: []
      limit:
        name: limit
        description: 'Per Page Limit Override.'
        required: false
        example: 10
        type: integer
        custom: []
      offset:
        name: offset
        description: 'Offset Override.'
        required: false
        example: 0
        type: integer
        custom: []
    cleanBodyParameters:
      is_featured: 1
      filter: 'Filterable columns are: id, name, created_at, updated_at'
      filter_value: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
      sort: 'Sortable columns are: id, name, created_at, updated_at'
      order: 'Sortable directions are: asc, desc'
      limit: 10
      offset: 0
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "categories": []
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: ''
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer kPDd1f4aEbV6ec56vh3gaZ8'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/article_categories/{article_id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: 'Article Categories'
      subgroupDescription: ''
      title: 'Get Article Categories by article id'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      article_id:
        name: article_id
        description: 'The id of the article.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      article_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "categories": []
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: ''
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 54613a8bvkPZaDV6edfhEgc'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/comments/replies/{comment_id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Comments
      subgroupDescription: ''
      title: 'Get replies to a comment'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      comment_id:
        name: comment_id
        description: 'The ID of the comment.'
        required: true
        example: ratione
        type: string
        custom: []
    cleanUrlParameters:
      comment_id: ratione
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      filter:
        name: filter
        description: 'Column to Filter.'
        required: false
        example: 'Filterable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
        type: string
        custom: []
      filter_value:
        name: filter_value
        description: 'Value to Filter.'
        required: false
        example: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
        type: string
        custom: []
      sort:
        name: sort
        description: 'Column to Sort.'
        required: false
        example: 'Sortable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
        type: string
        custom: []
      order:
        name: order
        description: 'Direction to Sort.'
        required: false
        example: 'Sortable directions are: asc, desc'
        type: string
        custom: []
      limit:
        name: limit
        description: 'Per Page Limit Override.'
        required: false
        example: 10
        type: integer
        custom: []
      offset:
        name: offset
        description: 'Offset Override.'
        required: false
        example: 0
        type: integer
        custom: []
    cleanBodyParameters:
      filter: 'Filterable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
      filter_value: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
      sort: 'Sortable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
      order: 'Sortable directions are: asc, desc'
      limit: 10
      offset: 0
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "data": {},
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "Comment not found"}'
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer adPDgfa38VZ6hbE1v5ec46k'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/comments/like_toggle
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Comments
      subgroupDescription: ''
      title: 'Toggle a Comment Like'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      comment_id:
        name: comment_id
        description: 'The id of the comment.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanBodyParameters:
      comment_id: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Comment liked/Un-Liked",
          }
        headers: []
        description: success
        custom: []
      -
        status: 422
        content: '{"errors": ["comment_id": ["The Comment Id field is required."] ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer g3acZDadkh6V14PfEb6v58e'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/comments/report
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Comments
      subgroupDescription: ''
      title: 'Report a comment'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      comment_id:
        name: comment_id
        description: 'The id of the comment.'
        required: true
        example: 1
        type: integer
        custom: []
      reason:
        name: reason
        description: 'The reason for reporting the comment.'
        required: true
        example: Spam
        type: string
        custom: []
      violation_level:
        name: violation_level
        description: 'The violation level of this report'
        required: false
        example: ea
        type: required
        custom: []
      violation_type:
        name: violation_type
        description: 'The violation type of this report'
        required: false
        example: minima
        type: required
        custom: []
    cleanBodyParameters:
      comment_id: 1
      reason: Spam
      violation_level: ea
      violation_type: minima
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Comment reported",
          }
        headers: []
        description: success
        custom: []
      -
        status: 422
        content: '{"errors": ["comment_id": ["The Comment Id field is required."] ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
      -
        status: 422
        content: '{"message": "You have already reported this comment" ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 5Z4e6akcaV6gEf1hvb3PD8d'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/comments
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Comments
      subgroupDescription: ''
      title: 'Get comments on a commentable type (eg. Articles)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      type:
        name: type
        description: 'The type of commentable.'
        required: true
        example: article
        type: string
        custom: []
      id:
        name: id
        description: 'The id of the commentable.'
        required: true
        example: 1
        type: integer
        custom: []
      replies_per_comment:
        name: replies_per_comment
        description: 'Number of replies to show per comment.'
        required: false
        example: 3
        type: integer
        custom: []
      filter:
        name: filter
        description: 'Column to Filter.'
        required: false
        example: 'Filterable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
        type: string
        custom: []
      filter_value:
        name: filter_value
        description: 'Value to Filter.'
        required: false
        example: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
        type: string
        custom: []
      sort:
        name: sort
        description: 'Column to Sort.'
        required: false
        example: 'Sortable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
        type: string
        custom: []
      order:
        name: order
        description: 'Direction to Sort.'
        required: false
        example: 'Sortable directions are: asc, desc'
        type: string
        custom: []
      limit:
        name: limit
        description: 'Per Page Limit Override.'
        required: false
        example: 10
        type: integer
        custom: []
      offset:
        name: offset
        description: 'Offset Override.'
        required: false
        example: 0
        type: integer
        custom: []
    cleanBodyParameters:
      type: article
      id: 1
      replies_per_comment: 3
      filter: 'Filterable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
      filter_value: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
      sort: 'Sortable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
      order: 'Sortable directions are: asc, desc'
      limit: 10
      offset: 0
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [],
           "links": {},
           "meta": {
              "current_page": 1,
            }
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: ''
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer hdbv3k4V86gD1fcePZE6aa5'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/comments
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Comments
      subgroupDescription: ''
      title: 'Create a new comment by logged in user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      type:
        name: type
        description: 'The type of commentable.'
        required: true
        example: article
        type: string
        custom: []
      id:
        name: id
        description: 'The id of the commentable.'
        required: true
        example: 1
        type: integer
        custom: []
      body:
        name: body
        description: 'The body of the comment.'
        required: true
        example: 'This is a comment'
        type: string
        custom: []
      parent_id:
        name: parent_id
        description: 'The id of the parent comment (For Replies).'
        required: false
        example: 1
        type: integer
        custom: []
    cleanBodyParameters:
      type: article
      id: 1
      body: 'This is a comment'
      parent_id: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "comment": {},
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: ''
        headers: []
        description: 'Not Found'
        custom: []
      -
        status: 422
        content: '{"errors": ["commentable_type": ["The Commentable Type field is required."] ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer f3vk8e6da6b1haE4Pg5VZDc'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/comments/{id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Comments
      subgroupDescription: ''
      title: 'Show one comment by ID'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the comment.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: 'The id of the comment.'
        required: true
        example: 1
        type: integer
        custom: []
      replies_per_comment:
        name: replies_per_comment
        description: 'Number of replies to show per comment.'
        required: false
        example: 3
        type: integer
        custom: []
    cleanBodyParameters:
      id: 1
      replies_per_comment: 3
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "comment": {},
          }
        headers: []
        description: success
        custom: []
      -
        status: 401
        content: ''
        headers: []
        description: Forbidden
        custom: []
      -
        status: 404
        content: ''
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer a8vbEkDdgZfP6e14cV36a5h'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/v1/comments/{id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Comments
      subgroupDescription: ''
      title: 'Update comment by ID. (Only owner of comment can update)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The id of the comment.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      body:
        name: body
        description: 'The body of the comment.'
        required: true
        example: 'This is a comment'
        type: string
        custom: []
    cleanBodyParameters:
      body: 'This is a comment'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Comment updated",
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "Comment not found"}'
        headers: []
        description: 'Not Found'
        custom: []
      -
        status: 422
        content: '{"errors": ["body": ["The Body field is required."] ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer E51cfvahde3k4V8gDZ6ab6P'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/comments/{id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Comments
      subgroupDescription: ''
      title: 'Remove comment by ID. (Only owner of comment can delete)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The id of the comment.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Zacdf5kvbD1aheV4gE6P683'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/interactions
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Interactions
      subgroupDescription: ''
      title: 'Get interactions on a interactable type (eg. Articles)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      interactable:
        name: interactable
        description: 'The type of interactable.'
        required: true
        example: article
        type: string
        custom: []
      id:
        name: id
        description: 'The id of the interactable.'
        required: true
        example: 1
        type: integer
        custom: []
      filter:
        name: filter
        description: 'Column to Filter.'
        required: false
        example: 'Filterable columns are: id, interactable_id, interactable_type, body, created_at, updated_at'
        type: string
        custom: []
      filter_value:
        name: filter_value
        description: 'Value to Filter.'
        required: false
        example: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
        type: string
        custom: []
      sort:
        name: sort
        description: 'Column to Sort.'
        required: false
        example: 'Sortable columns are: id, interactable_id, interactable_type, body, created_at, updated_at'
        type: string
        custom: []
      order:
        name: order
        description: 'Direction to Sort.'
        required: false
        example: 'Sortable directions are: asc, desc'
        type: string
        custom: []
      limit:
        name: limit
        description: 'Per Page Limit Override.'
        required: false
        example: 10
        type: integer
        custom: []
      offset:
        name: offset
        description: 'Offset Override.'
        required: false
        example: 0
        type: integer
        custom: []
    cleanBodyParameters:
      interactable: article
      id: 1
      filter: 'Filterable columns are: id, interactable_id, interactable_type, body, created_at, updated_at'
      filter_value: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
      sort: 'Sortable columns are: id, interactable_id, interactable_type, body, created_at, updated_at'
      order: 'Sortable directions are: asc, desc'
      limit: 10
      offset: 0
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [],
           "links": {},
           "meta": {
              "current_page": 1,
            }
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: ''
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer EVZhPf85ebD6d3c6g4k1vaa'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/interactions
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Interactions
      subgroupDescription: ''
      title: 'Create an interaction for interactable type'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      interactable:
        name: interactable
        description: 'The type of interactable.'
        required: true
        example: article
        type: string
        custom: []
      type:
        name: type
        description: 'The type of interaction.'
        required: true
        example: 'like,dislike,share,bookmark'
        type: string
        custom: []
      id:
        name: id
        description: 'The id of the interactable (eg. Article ID).'
        required: true
        example: 1
        type: integer
        custom: []
    cleanBodyParameters:
      interactable: article
      type: 'like,dislike,share,bookmark'
      id: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "interaction": {}
          }
        headers: []
        description: success
        custom: []
      -
        status: 422
        content: '{}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6Za1kVvd5e436gbfEPD8ahc'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/interactions/{id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Interactions
      subgroupDescription: ''
      title: 'Show one interaction by ID'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The id of the interaction.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer fcDad46bEVa5Ze683khPg1v'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/interactions/{id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Interactions
      subgroupDescription: ''
      title: |-
        Remove Interaction By ID
        Only owner can call this method
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The id of the interaction.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Interaction deleted"
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: "{['message' => 'Interaction not found']}"
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer PcgZhD1643v8b6Efdk5Veaa'
    controller: null
    method: null
    route: null
    custom: []
