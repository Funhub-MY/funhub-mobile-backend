## Autogenerated by Scribe. DO NOT MODIFY.

name: Article
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/public_articles
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Web - Get Public Articles'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      limit:
        name: limit
        description: 'optional Limit the number of results.'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      limit: 10
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "data": []
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer gfa8kcEvDhZ5e3a61Vd64Pb'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/public_articles_single
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Web - Get Single Public Article'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'optional The id of the article.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      slug:
        name: slug
        description: 'optional The slug of the article.'
        required: false
        example: my-article
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
      slug: my-article
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: 'This field is required when <code>slug</code> is <code>null</code>.'
        required: false
        example: 14
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      slug:
        name: slug
        description: 'This field is required when <code>id</code> is <code>null</code>.'
        required: false
        example: quam
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      id: 14
      slug: quam
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "article": {}
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer ekchfdPa86Va5b346gvZDE1'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/public_articles_single/{article_id}/offers'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Web - Get an Article's Offers"
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      article_id:
        name: article_id
        description: 'The ID of the article.'
        required: true
        example: 34
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      id:
        name: id
        description: 'The id of the article.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      article_id: 34
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "data": [],
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer b4Z8f3a6gavV5Pd61eEDkch'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/article_cities
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Article Cities (Unique)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      search:
        name: search
        description: 'optional Search for city.'
        required: false
        example: '"Kota"'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      search: '"Kota"'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "cities": []
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer P5gEVc4fh3ea1akd66bZ8Dv'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/articles/gallery
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Upload Images for Article'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      images:
        name: images
        description: 'The images to upload.'
        required: true
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      is_cover:
        name: is_cover
        description: 'used to set this image as a cover.'
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      is_cover: true
    fileParameters:
      images: null
    responses:
      -
        status: 200
        content: |-
          {
          "uploaded": [
              {
                 "id": 1,
                 "name": "image.jpg",
                 "url": "http://localhost:8000/storage/user_uploads/1/image.jpg",
                 "size": 12345,
                 "type": "image/jpeg"
             }
          ]
          }
        headers: []
        description: success
        custom: []
      -
        status: 422
        content: '{"errors": ["images": ["The images field is required."] ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 8eZa51fDvkP6dEabVh63c4g'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/articles/video-upload
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Upload Video for Article'
      description: |-
        Video size must not larger than 500MB, will stream video response back to client on progress via header X-Upload-Progress / calculate your own using X-Content-Duration

        Must be able to stream completion percentage back to client
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      video:
        name: video
        description: 'The video to upload.'
        required: true
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters: []
    fileParameters:
      video: null
    responses:
      -
        status: 200
        content: |-
          {
          "url" : "http://localhost:8000/storage/user_video_uploads/1/video.mp4"
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer d46hb6aaZ5E8v13DVgecPfk'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/articles/my_articles
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Articles by User ID or Logged In User'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: 'optional Load Spciefic User Articles.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      published_only:
        name: published_only
        description: 'optional Filter by published articles.'
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      filter:
        name: filter
        description: 'Column to Filter.'
        required: false
        example: 'Filterable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      filter_value:
        name: filter_value
        description: 'Value to Filter.'
        required: false
        example: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      sort:
        name: sort
        description: 'Column to Sort.'
        required: false
        example: 'Sortable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      order:
        name: order
        description: 'Direction to Sort.'
        required: false
        example: 'Sortable directions are: asc, desc'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      limit:
        name: limit
        description: 'Per Page Limit Override.'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      offset:
        name: offset
        description: 'Offset Override.'
        required: false
        example: 0
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      video_only:
        name: video_only
        description: 'optional Filter by Videos.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      user_id: 1
      published_only: true
      filter: 'Filterable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
      filter_value: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
      sort: 'Sortable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
      order: 'Sortable directions are: asc, desc'
      limit: 10
      offset: 0
      video_only: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [],
           "links": {},
           "meta": {
              "current_page": 1,
            }
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer avd6a6fEeVgD48bZ1hkc35P'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/articles/my_bookmarks
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Bookmarked Articles by User ID or Logged In User'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: 'optional Load Spciefic User Bookmarked Articles.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      filter:
        name: filter
        description: 'Column to Filter.'
        required: false
        example: 'Filterable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      filter_value:
        name: filter_value
        description: 'Value to Filter.'
        required: false
        example: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      sort:
        name: sort
        description: 'Column to Sort.'
        required: false
        example: 'Sortable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      order:
        name: order
        description: 'Direction to Sort.'
        required: false
        example: 'Sortable directions are: asc, desc'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      limit:
        name: limit
        description: 'Per Page Limit Override.'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      offset:
        name: offset
        description: 'Offset Override.'
        required: false
        example: 0
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      video_only:
        name: video_only
        description: 'optional Filter by Videos.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      user_id: 1
      filter: 'Filterable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
      filter_value: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
      sort: 'Sortable columns are: id, title, type, slug, status, published_at, created_at, updated_at'
      order: 'Sortable directions are: asc, desc'
      limit: 10
      offset: 0
      video_only: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [],
           "links": {},
           "meta": {
              "current_page": 1,
            }
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6h1fvc463dVeg8DaZakPEb5'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/articles/report
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Reports
      subgroupDescription: ''
      title: 'Report an article'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      article_id:
        name: article_id
        description: ''
        required: true
        example: 6
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      reason:
        name: reason
        description: 'The reason for reporting the comment.'
        required: true
        example: 'Spam     * @bodyParam violation_type required The violation type of this report'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      violation_type:
        name: violation_type
        description: ''
        required: true
        example: expedita
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      violation_level:
        name: violation_level
        description: 'The violation level of this report'
        required: false
        example: velit
        type: required
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      article:
        name: article
        description: 'The id of the article.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      article_id: 6
      reason: 'Spam     * @bodyParam violation_type required The violation type of this report'
      violation_type: expedita
      violation_level: velit
      article: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Comment reported",
          }
        headers: []
        description: success
        custom: []
      -
        status: 422
        content: '{"errors": ["article_id": ["The Article Id field is required."] ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
      -
        status: 422
        content: '{"message": "You have already reported this comment" ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Pv1ca4h6863DeEagfVbZ5dk'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/articles/not_interested
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Hide Article When Not Interested By user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      article_id:
        name: article_id
        description: 'Article Id.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      article_id: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Article marked as not interested"
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 68fk4Pace1DhaZb6E5vVd3g'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/articles/tagged_users
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Tagged users of article'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      article_id:
        name: article_id
        description: 'Article Id.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      article_id: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [],
           "links": {},
           "meta": {
              "current_page": 1,
            }
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6V386dPg1vE4bkae5cDafZh'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/articles/merchant_offers/{article_id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Article Merchant Offers'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      article_id:
        name: article_id
        description: 'The ID of the article.'
        required: true
        example: 8
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      article:
        name: article
        description: 'The id of the article.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      article_id: 8
      article: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "data": [
          {}
          ]
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Pbc5ZDagv6Vf4hadE13e8k6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/articles/recommendations
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Save Article Recommendations (from Algolia)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      article_ids:
        name: article_ids
        description: 'Article Ids to Filter. Example [1,2,3]'
        required: true
        example:
          - dolor
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      article_ids:
        - dolor
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Article recommendations updated",
          "user_id": 1,
          "total_articles": 3
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: '{"message": "Unauthenticated."}'
        headers: []
        description: Unauthenticated
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer d3VPeb6E6gZD1kh8a4fac5v'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/articles/nearby
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Articles Nearby'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      article_ids:
        name: article_ids
        description: 'optional Article Ids to Filter. Example [1,2,3]'
        required: false
        example:
          - atque
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      category_ids:
        name: category_ids
        description: 'optional Category Ids to Filter.'
        required: false
        example:
          - 1
          - 2
          - 3
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      video_only:
        name: video_only
        description: 'optional Filter by Videos.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      tag_ids:
        name: tag_ids
        description: 'optional Tag Ids to Filter.'
        required: false
        example:
          - 1
          - 2
          - 3
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      city:
        name: city
        description: 'optional Filter by City Name.'
        required: false
        example: 'Subang Jaya'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      lat:
        name: lat
        description: 'Filter by Lat of User (must provide lng).'
        required: true
        example: 3.123456
        type: number
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      lng:
        name: lng
        description: 'Filter by Lng of User (must provide lat).'
        required: true
        example: 101.123456
        type: number
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      radius:
        name: radius
        description: 'optional Filter by Radius (in meters) if provided lat, lng.'
        required: false
        example: 10000
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      include_own_article:
        name: include_own_article
        description: 'optional Include own article.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      limit:
        name: limit
        description: 'optional Per Page Limit Override.'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      article_ids:
        - atque
      category_ids:
        - 1
        - 2
        - 3
      video_only: 1
      tag_ids:
        - 1
        - 2
        - 3
      city: 'Subang Jaya'
      lat: 3.123456
      lng: 101.123456
      radius: 10000
      include_own_article: 1
      limit: 10
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "data": [],
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer aZ3Dh4avek8fgP16cV6Eb5d'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/articles/keyword
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Articles by Keyword ID'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      keyword_id:
        name: keyword_id
        description: 'ID required The id of the keyword.'
        required: false
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      keyword_id: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      keyword_id:
        name: keyword_id
        description: 'The <code>id</code> of an existing record in the search_keywords table.'
        required: true
        example: 15
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      keyword_id: 15
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "data": []
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer EVa6bvdkfecgZDa64h5P183'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/articles/search
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Search Articles'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      suggestion:
        name: suggestion
        description: 'Suggested keyword.'
        required: false
        example: 'KL Food'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      suggestion: 'KL Food'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [],
           "links": {},
           "meta": {
              "current_page": 1,
            }
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Pf13aV4gDe6vkh65EZad8cb'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/articles
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: |-
        Get Articles for Logged in user (for Home Page)
        Note: user's own posts will not show up on home page
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      article_ids:
        name: article_ids
        description: 'optional Article Ids to Filter. Example [1,2,3]'
        required: false
        example:
          - sit
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      category_ids:
        name: category_ids
        description: 'optional Category Ids to Filter.'
        required: false
        example:
          - 1
          - 2
          - 3
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      video_only:
        name: video_only
        description: 'optional Filter by Videos.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      following_only:
        name: following_only
        description: 'optional Filter by Articles by Users who logged in user is following.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      tag_ids:
        name: tag_ids
        description: 'optional Tag Ids to Filter.'
        required: false
        example:
          - 1
          - 2
          - 3
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      city:
        name: city
        description: 'optional Filter by City.'
        required: false
        example: 'Subang Jaya'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      lat:
        name: lat
        description: 'optional Filter by Lat of User (must provide lng).'
        required: false
        example: 3.123456
        type: number
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      lng:
        name: lng
        description: 'optional Filter by Lng of User (must provide lat).'
        required: false
        example: 101.123456
        type: number
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      radius:
        name: radius
        description: 'optional Filter by Radius (in meters) if provided lat, lng.'
        required: false
        example: 10000
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      location_id:
        name: location_id
        description: 'optional Filter by Location Id.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      store_id:
        name: store_id
        description: 'optional Filter by Store Id.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      include_own_article:
        name: include_own_article
        description: 'optional Include own article.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      disable_home_conditions:
        name: disable_home_conditions
        description: 'optional Disable Home Conditions like hidden from home or whitelisted.'
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      pinned_only:
        name: pinned_only
        description: 'optional Filter by Pinned Articles.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      build_recommendations:
        name: build_recommendations
        description: 'optional Build Recommendations On or Off, On by Default.'
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      refresh_recommendations:
        name: refresh_recommendations
        description: 'optional Refresh Recommendations.'
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      limit:
        name: limit
        description: 'optional Per Page Limit Override.'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      article_ids:
        - sit
      category_ids:
        - 1
        - 2
        - 3
      video_only: 1
      following_only: 1
      tag_ids:
        - 1
        - 2
        - 3
      city: 'Subang Jaya'
      lat: 3.123456
      lng: 101.123456
      radius: 10000
      location_id: 1
      store_id: 1
      include_own_article: 1
      disable_home_conditions: true
      pinned_only: 1
      build_recommendations: true
      refresh_recommendations: true
      limit: 10
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [],
           "links": {},
           "meta": {
              "current_page": 1,
            }
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Zab83e5v16cgk46hfPaDdVE'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/articles
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create New Article'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'The title of the article.'
        required: true
        example: 'This is a title'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      type:
        name: type
        description: 'The type of the article.'
        required: true
        example: 'multimedia,text,video'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      body:
        name: body
        description: 'The body of the article.'
        required: true
        example: 'This is a caption or body of article'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      status:
        name: status
        description: 'The status of the article.'
        required: true
        example: 0
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      published_at:
        name: published_at
        description: 'The published date of the article.'
        required: false
        example: '2021-02-21 12:00:00'
        type: datetime
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      categories:
        name: categories
        description: 'The categories ID of the article.'
        required: false
        example:
          - 1
          - 2
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      tags:
        name: tags
        description: 'The tags of the article.'
        required: false
        example:
          - '#tag1'
          - '#tag2'
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      images:
        name: images
        description: 'The images IDs. Must first call upload images endpoint.'
        required: false
        example:
          - 1
          - 2
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      video:
        name: video
        description: 'The video ID. Must first call upload videos endpoint.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      excerpt:
        name: excerpt
        description: 'The excerpt of the article.'
        required: false
        example: 'This is a excerpt of article'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      location:
        name: location
        description: 'The location of the article.'
        required: false
        example: '{"lat": 123, "lng": 123, "name": "location name", "address": "location address", "address_2" : "", "city": "city", "state": "state name/id", "postcode": "010000", "rating": "5"}'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      tagged_user_ids:
        name: tagged_user_ids
        description: 'The tagged users IDs.'
        required: false
        example:
          - 1
          - 2
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      visibility:
        name: visibility
        description: 'The visibility of the article.'
        required: false
        example: 'public,private'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      title: 'This is a title'
      type: 'multimedia,text,video'
      body: 'This is a caption or body of article'
      status: 0
      published_at: '2021-02-21 12:00:00'
      categories:
        - 1
        - 2
      tags:
        - '#tag1'
        - '#tag2'
      images:
        - 1
        - 2
      video: 1
      excerpt: 'This is a excerpt of article'
      location: '{"lat": 123, "lng": 123, "name": "location name", "address": "location address", "address_2" : "", "city": "city", "state": "state name/id", "postcode": "010000", "rating": "5"}'
      tagged_user_ids:
        - 1
        - 2
      visibility: 'public,private'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Article updated",
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "Comment not found"}'
        headers: []
        description: 'Not Found'
        custom: []
      -
        status: 422
        content: '{"errors": ["body": ["The Body field is required."] ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer eva86365fcbgh1EPDZ4kVad'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/articles/{id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get One Article by ID'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The id of the article.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "article": {}
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "Article not found"}'
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer gd3bfcP81hZk6V4eD65aaEv'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/v1/articles/{id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update article by ID. (Only owner of article can update)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The id of the article.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      body:
        name: body
        description: 'The body of the article.'
        required: true
        example: 'This is a comment'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      status:
        name: status
        description: 'The status of the article, change this to 0 to unpublish.'
        required: true
        example: 0
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      title:
        name: title
        description: 'The title of the article, will regenerate slug.'
        required: true
        example: 'This is a title'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      tags:
        name: tags
        description: 'The tags of the article.'
        required: false
        example:
          - '#tag1'
          - '#tag2'
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      categories:
        name: categories
        description: 'The categories ID of the article.'
        required: false
        example:
          - 1
          - 2
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      images:
        name: images
        description: 'The images ID of the article.'
        required: false
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      video:
        name: video
        description: 'The video ID of the article.'
        required: false
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      tagged_user_ids:
        name: tagged_user_ids
        description: 'The tagged user IDs of the article.'
        required: false
        example:
          - 1
          - 2
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      location:
        name: location
        description: 'The location of the article.'
        required: false
        example: '{"lat": 123, "lng": 123, "name": "location name", "address": "location address", "address_2" : "", "city": "city", "state": "state name/id", "postcode": "010000", "rating": "5"}'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      visibility:
        name: visibility
        description: 'The visibility of the article.'
        required: false
        example: 'public,private'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      body: 'This is a comment'
      status: 0
      title: 'This is a title'
      tags:
        - '#tag1'
        - '#tag2'
      categories:
        - 1
        - 2
      tagged_user_ids:
        - 1
        - 2
      location: '{"lat": 123, "lng": 123, "name": "location name", "address": "location address", "address_2" : "", "city": "city", "state": "state name/id", "postcode": "010000", "rating": "5"}'
      visibility: 'public,private'
    fileParameters:
      images: null
      video: null
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Article updated",
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "Comment not found"}'
        headers: []
        description: 'Not Found'
        custom: []
      -
        status: 422
        content: '{"errors": ["body": ["The Body field is required."] ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 16facVb6Z534eDgdakEhv8P'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/articles/{id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Remove article by ID. (Only owner of article can delete)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The id of the Article.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Article deleted"
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "Article not found"}'
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer va4DcgP1h3bVfaZ58Edek66'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/article_tags
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: 'Article Tags'
      subgroupDescription: ''
      title: 'Get popular tags'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      filter:
        name: filter
        description: 'Column to Filter.'
        required: false
        example: 'Filterable columns are: id, name, created_at, updated_at'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      filter_value:
        name: filter_value
        description: 'Value to Filter.'
        required: false
        example: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      sort:
        name: sort
        description: 'Column to Sort.'
        required: false
        example: 'Sortable columns are: id, name, created_at, updated_at'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      order:
        name: order
        description: 'Direction to Sort.'
        required: false
        example: 'Sortable directions are: asc, desc'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      limit:
        name: limit
        description: 'Per Page Limit Override.'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      offset:
        name: offset
        description: 'Offset Override.'
        required: false
        example: 0
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      filter: 'Filterable columns are: id, name, created_at, updated_at'
      filter_value: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
      sort: 'Sortable columns are: id, name, created_at, updated_at'
      order: 'Sortable directions are: asc, desc'
      limit: 10
      offset: 0
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "tags": []
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: ''
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer va4d1gba6Z6keVDcE3f8P5h'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/article_tags/all
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: 'Article Tags'
      subgroupDescription: ''
      title: 'Get all tags available'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      search:
        name: search
        description: 'optional Hashtag to Filter.'
        required: false
        example: ta
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      filter:
        name: filter
        description: 'Column to Filter.'
        required: false
        example: 'Filterable columns are: id, name, created_at, updated_at'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      filter_value:
        name: filter_value
        description: 'Value to Filter.'
        required: false
        example: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      sort:
        name: sort
        description: 'Column to Sort.'
        required: false
        example: 'Sortable columns are: id, name, created_at, updated_at'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      order:
        name: order
        description: 'Direction to Sort.'
        required: false
        example: 'Sortable directions are: asc, desc'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      limit:
        name: limit
        description: 'Per Page Limit Override.'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      search: ta
      filter: 'Filterable columns are: id, name, created_at, updated_at'
      filter_value: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
      sort: 'Sortable columns are: id, name, created_at, updated_at'
      order: 'Sortable directions are: asc, desc'
      limit: 10
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "tags": []
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3e16ZVk6a5gv8fP4aDEcdhb'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/article_tags/{article_id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: 'Article Tags'
      subgroupDescription: ''
      title: 'Get Tags by article id'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      article_id:
        name: article_id
        description: 'The id of the article.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      article_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "tags": []
           }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: ''
        headers: []
        description: 'No tags found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer h6aeac4Dg3ZEVd8fkPv5b16'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/article_categories
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: 'Article Categories'
      subgroupDescription: ''
      title: 'Get popular Article Categories'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      is_featured:
        name: is_featured
        description: 'Is Featured Categories.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      filter:
        name: filter
        description: 'Column to Filter.'
        required: false
        example: 'Filterable columns are: id, name, created_at, updated_at'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      filter_value:
        name: filter_value
        description: 'Value to Filter.'
        required: false
        example: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      sort:
        name: sort
        description: 'Column to Sort.'
        required: false
        example: 'Sortable columns are: id, name, created_at, updated_at'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      order:
        name: order
        description: 'Direction to Sort.'
        required: false
        example: 'Sortable directions are: asc, desc'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      limit:
        name: limit
        description: 'Per Page Limit Override.'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      offset:
        name: offset
        description: 'Offset Override.'
        required: false
        example: 0
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      is_featured: 1
      filter: 'Filterable columns are: id, name, created_at, updated_at'
      filter_value: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
      sort: 'Sortable columns are: id, name, created_at, updated_at'
      order: 'Sortable directions are: asc, desc'
      limit: 10
      offset: 0
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "categories": []
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: ''
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer a6vb3fDZagch8Pe45d6VEk1'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/article_categories/all
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: 'Article Categories'
      subgroupDescription: ''
      title: 'Get All Article Categories'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "categories": []
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: ''
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer bav3a6ZP5c61eVk8D4dEhfg'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/article_categories/{article_id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: 'Article Categories'
      subgroupDescription: ''
      title: 'Get Article Categories by article id'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      article_id:
        name: article_id
        description: 'The id of the article.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      article_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "categories": []
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: ''
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 4fE83VaeaZPD6b5dgk61vch'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/comments/replies/{comment_id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Comments
      subgroupDescription: ''
      title: 'Get replies to a comment'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      comment_id:
        name: comment_id
        description: 'The ID of the comment.'
        required: true
        example: libero
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      comment_id: libero
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      reply_to_id:
        name: reply_to_id
        description: 'The id of the comment.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      filter:
        name: filter
        description: 'Column to Filter.'
        required: false
        example: 'Filterable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      filter_value:
        name: filter_value
        description: 'Value to Filter.'
        required: false
        example: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      sort:
        name: sort
        description: 'Column to Sort.'
        required: false
        example: 'Sortable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      order:
        name: order
        description: 'Direction to Sort.'
        required: false
        example: 'Sortable directions are: asc, desc'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      limit:
        name: limit
        description: 'Per Page Limit Override.'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      offset:
        name: offset
        description: 'Offset Override.'
        required: false
        example: 0
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      reply_to_id: 1
      filter: 'Filterable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
      filter_value: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
      sort: 'Sortable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
      order: 'Sortable directions are: asc, desc'
      limit: 10
      offset: 0
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "data": {},
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "Comment not found"}'
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer g6EVk6P8bcaDaZ5v1hd4f3e'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/comments/like_toggle
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Comments
      subgroupDescription: ''
      title: 'Toggle a Comment Like'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      comment_id:
        name: comment_id
        description: 'The id of the comment.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      comment_id: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Comment liked/Un-Liked",
          }
        headers: []
        description: success
        custom: []
      -
        status: 422
        content: '{"errors": ["comment_id": ["The Comment Id field is required."] ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 68ahdbef4a6cE5Zg31VPDkv'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/comments/report
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Comments
      subgroupDescription: ''
      title: 'Report a comment'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      comment_id:
        name: comment_id
        description: 'The id of the comment.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      reason:
        name: reason
        description: 'The reason for reporting the comment.'
        required: true
        example: Spam
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      violation_level:
        name: violation_level
        description: 'The violation level of this report'
        required: false
        example: non
        type: required
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      violation_type:
        name: violation_type
        description: 'The violation type of this report'
        required: false
        example: molestiae
        type: required
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      comment_id: 1
      reason: Spam
      violation_level: non
      violation_type: molestiae
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Comment reported",
          }
        headers: []
        description: success
        custom: []
      -
        status: 422
        content: '{"errors": ["comment_id": ["The Comment Id field is required."] ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
      -
        status: 422
        content: '{"message": "You have already reported this comment" ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 183dP6E5a4fgcehZVaDb6vk'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/comments/taggable_users
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Comments
      subgroupDescription: ''
      title: |-
        Get taggable users in comment
        Only users whos is followers of logged in user can be tag in article
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      query:
        name: query
        description: 'optional Search query.'
        required: false
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      query: John
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "data": [],
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer vhE4DegPZ5bd638k6acVf1a'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/comments
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Comments
      subgroupDescription: ''
      title: 'Get comments on a commentable type (eg. Articles)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      type:
        name: type
        description: 'The type of commentable.'
        required: true
        example: article
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      id:
        name: id
        description: 'The id of the commentable.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      replies_per_comment:
        name: replies_per_comment
        description: 'Number of replies to show per comment.'
        required: false
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      replies_sort:
        name: replies_sort
        description: 'Column to Sort Replies.'
        required: false
        example: 'Sortable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      replies_order:
        name: replies_order
        description: 'Direction to Sort Replies.'
        required: false
        example: 'Sortable directions are: asc, desc'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      filter:
        name: filter
        description: 'Column to Filter.'
        required: false
        example: 'Filterable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      filter_value:
        name: filter_value
        description: 'Value to Filter.'
        required: false
        example: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      sort:
        name: sort
        description: 'Column to Sort.'
        required: false
        example: 'Sortable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      order:
        name: order
        description: 'Direction to Sort.'
        required: false
        example: 'Sortable directions are: asc, desc'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      limit:
        name: limit
        description: 'Per Page Limit Override.'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      offset:
        name: offset
        description: 'Offset Override.'
        required: false
        example: 0
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      type: article
      id: 1
      replies_per_comment: 3
      replies_sort: 'Sortable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
      replies_order: 'Sortable directions are: asc, desc'
      filter: 'Filterable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
      filter_value: 'Filterable values are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'
      sort: 'Sortable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
      order: 'Sortable directions are: asc, desc'
      limit: 10
      offset: 0
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [],
           "links": {},
           "meta": {
              "current_page": 1,
            }
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: ''
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 4Ef66D1hdka8eZ3VPabc5gv'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/comments
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Comments
      subgroupDescription: ''
      title: 'Create a new comment by logged in user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      type:
        name: type
        description: 'The type of commentable.'
        required: true
        example: article
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      id:
        name: id
        description: 'The id of the commentable.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      body:
        name: body
        description: 'The body of the comment.'
        required: true
        example: 'This is a comment'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      tagged_users:
        name: tagged_users
        description: 'List of user ids tagged in comment.'
        required: false
        example:
          - 1
          - 2
          - 3
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      parent_id:
        name: parent_id
        description: 'The id of the parent comment.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      reply_to_id:
        name: reply_to_id
        description: 'The id of the child comment (Under Replies).'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      type: article
      id: 1
      body: 'This is a comment'
      tagged_users:
        - 1
        - 2
        - 3
      parent_id: 1
      reply_to_id: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "comment": {},
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: ''
        headers: []
        description: 'Not Found'
        custom: []
      -
        status: 422
        content: '{"errors": ["commentable_type": ["The Commentable Type field is required."] ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer evbh4ckE1Pa5Dd6aVgf638Z'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/comments/{id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Comments
      subgroupDescription: ''
      title: 'Show one comment by ID'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the comment.'
        required: true
        example: fugit
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: fugit
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      id:
        name: id
        description: 'The id of the comment.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      replies_per_comment:
        name: replies_per_comment
        description: 'Number of replies to show per comment.'
        required: false
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      replies_sort:
        name: replies_sort
        description: 'Column to Sort Replies.'
        required: false
        example: 'Sortable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      replies_order:
        name: replies_order
        description: 'Direction to Sort Replies.'
        required: false
        example: 'Sortable directions are: asc, desc'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      id: 1
      replies_per_comment: 3
      replies_sort: 'Sortable columns are: id, commentable_id, commentable_type, body, created_at, updated_at'
      replies_order: 'Sortable directions are: asc, desc'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "comment": {},
          }
        headers: []
        description: success
        custom: []
      -
        status: 401
        content: ''
        headers: []
        description: Forbidden
        custom: []
      -
        status: 404
        content: ''
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6dVke354Zcah68PvDE1gbfa'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/v1/comments/{id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Comments
      subgroupDescription: ''
      title: 'Update comment by ID. (Only owner of comment can update)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The id of the comment.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      body:
        name: body
        description: 'The body of the comment.'
        required: true
        example: 'This is a comment'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      tagged_users:
        name: tagged_users
        description: 'List of user ids tagged in comment.'
        required: false
        example:
          - 1
          - 2
          - 3
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      body: 'This is a comment'
      tagged_users:
        - 1
        - 2
        - 3
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Comment updated",
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "Comment not found"}'
        headers: []
        description: 'Not Found'
        custom: []
      -
        status: 422
        content: '{"errors": ["body": ["The Body field is required."] ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3b4g58EhZcv1efaVDad66kP'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/comments/{id}'
    metadata:
      groupName: Article
      groupDescription: ''
      subgroup: Comments
      subgroupDescription: ''
      title: 'Remove comment by ID. (Only owner of comment can delete)'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The id of the comment.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer f6dVae5Z483hDgaEP6cvk1b'
    controller: null
    method: null
    route: null
    custom: []
