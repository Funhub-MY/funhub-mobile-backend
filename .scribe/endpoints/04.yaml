name: User
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/user/followings
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: Followings
      subgroupDescription: ''
      title: 'Get all followings of user id or logged in user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'optional The id of the user, if not provided will use Logged In User ID.'
        required: false
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      user_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "followings": []
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "User not found"}'
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer daD6kgZVbe13acv6Ef4h8P5'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/user/followers
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: Followers
      subgroupDescription: ''
      title: 'Get all followers of user id or logged in user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'optional The id of the user, if not provided will use Logged In User ID.'
        required: false
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      user_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "followers": []
          }
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "User not found"}'
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 1bdgZvVD8EP6he5k6aca34f'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/user/follow
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: Followings
      subgroupDescription: ''
      title: 'Follow another user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: 'The id of the user to follow'
        required: true
        example: 6
        type: integer
        custom: []
    cleanBodyParameters:
      user_id: 6
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "You are now following this user"
          }
        headers: []
        description: success
        custom: []
      -
        status: 400
        content: '{"message": "You are already following this user"}'
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer ha36b1gVefZdkc8v5E6DP4a'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/user/unfollow
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: Followings
      subgroupDescription: ''
      title: 'Unfollow another user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: 'The id of the user to unfollow'
        required: true
        example: 4
        type: integer
        custom: []
    cleanBodyParameters:
      user_id: 4
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "You are now unfollowing this user"
          }
        headers: []
        description: success
        custom: []
      -
        status: 400
        content: '{"message": "You are not following this user"}'
        headers: []
        description: 'Not Found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 5ekf4EPhbd3cv6g81aaVZD6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/user/report
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: Reports
      subgroupDescription: ''
      title: 'Report a user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: 'The id of the comment.'
        required: true
        example: 1
        type: integer
        custom: []
      reason:
        name: reason
        description: ''
        required: true
        example: animi
        type: string
        custom: []
      violation_level:
        name: violation_level
        description: 'The violation level of this report'
        required: false
        example: delectus
        type: required
        custom: []
      violation_type:
        name: violation_type
        description: 'The violation type of this report'
        required: false
        example: ut
        type: required
        custom: []
      also_block_user:
        name: also_block_user
        description: 'optional Whether to block the user or not.'
        required: false
        example: true
        type: boolean
        custom: []
    cleanBodyParameters:
      user_id: 1
      reason: animi
      violation_level: delectus
      violation_type: ut
      also_block_user: true
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Comment reported",
          }
        headers: []
        description: success
        custom: []
      -
        status: 422
        content: '{"errors": ["user_id": ["The User Id field is required."] ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
      -
        status: 422
        content: '{"message": "You have already reported this comment" ]}'
        headers: []
        description: 'Invalid Form Fields'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer dEkge1vfD6ha6a843PcV5Zb'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/user/block
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: Blocks
      subgroupDescription: ''
      title: 'Block a user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: 'The id of the user.'
        required: true
        example: 1
        type: integer
        custom: []
      reason:
        name: reason
        description: 'optional The reason for blocking the user.'
        required: false
        example: Spam
        type: string
        custom: []
    cleanBodyParameters:
      user_id: 1
      reason: Spam
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "User blocked",
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer g14Eeac8D5vah3kPV6dZbf6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/users_by_id
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Users By IDs'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_ids:
        name: user_ids
        description: 'The ids of the users.'
        required: true
        example: '1,2,3'
        type: string
        custom: []
    cleanUrlParameters:
      user_ids: '1,2,3'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_ids:
        name: user_ids
        description: ''
        required: true
        example: necessitatibus
        type: string
        custom: []
    cleanBodyParameters:
      user_ids: necessitatibus
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "data": {
          }
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 5VeZE68bDg3Padcfav61k4h'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/user/{user_id}'
    metadata:
      groupName: User
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get a user'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {USER_TOKEN_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        custom: []
      user:
        name: user
        description: 'The id of the user.'
        required: true
        example: '1'
        type: string
        custom: []
    cleanUrlParameters:
      user_id: 1
      user: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "data": {
          }
        headers: []
        description: success
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer a3h6k65bDPcafv481ZEVdeg'
    controller: null
    method: null
    route: null
    custom: []
